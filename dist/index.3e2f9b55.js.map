{"mappings":"AAAA,MAAM,CAAC,MAAM,GAAG,SAAU,eAAe,EAAE;IACzC,IAAI,QAAQ,AAAC;IACb,IAAI,OAAO,eAAe,KAAK,QAAQ,EACrC,QAAQ,GAAG,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;SACjD,IAAI,eAAe,YAAY,KAAK,EACzC,QAAQ,GAAG,eAAe,CAAC;IAG7B,gDAAkB;IACY,OAAvB;QACL,IAAI,EAAC,QAAQ,EAAE;YACb,IAAI,KAAK,GAAG,EAAE,AAAC;YACf,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CACtC,KAAK,GAAG,KAAK,CAAC,MAAM,CAClB,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CACnD,CAAC;YAEJ,uNAGG,CACH,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,mBAAa;YAC5B,OAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErB,mGAIG,CAEH,sHAKG,EACJ;QACD,IAAI,EAAC,EAAE,EAAE;YACP,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CACtC,EAAE,CAAC,IAAI,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,yCAAyB;YAE1C,OAAT,IAAI,CAAC,CAAC,mBAAa;SACrB;QACP,MAAM,IAAG;YACP,MAAM,KAAK,GAAG,EAAE,AAAC;YACjB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAK;gBAClB,8BAAY;gBACM,IAAd,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,EACvC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAE/B,CAAC,CAAC;YACH,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,6EAAmC;SAChB;QAC3C,QAAQ,IAAG;YACT,MAAM,KAAK,GAAG,EAAE,AAAC;YACjB,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,GAAK;gBAClB,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC7B,qYAOG,EACJ,CAAC,CAAC;YACH,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;SACtB;QACD,KAAK,IAAG;YACN,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,qEAAiC;SACrB;QACrC,oCAAc;QACQ,QAAd,EAAC,SAAS,EAAE;YAClB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,CACtC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAEvC,OAAO,IAAI,CAAC;SACb;QACD,MAAM,EAAE,eAAe,CAAC,MAAM;QAC9B,GAAG,IAAG;YACJ,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,qCAAqB;SAC1B;KAClB,CAAC;AACF,oEAIG,EACJ,CAAC","sources":["src/jquery.js"],"sourcesContent":["window.jQuery = function (selectorOrArray) {\r\n  let elements;\r\n  if (typeof selectorOrArray === \"string\") {\r\n    elements = document.querySelectorAll(selectorOrArray);\r\n  } else if (selectorOrArray instanceof Array) {\r\n    elements = selectorOrArray;\r\n  }\r\n\r\n  // 返回一个可以直接操作元素的对象\r\n  return {\r\n    find(selector) {\r\n      let array = [];\r\n      for (let i = 0; i < elements.length; i++) {\r\n        array = array.concat(\r\n          Array.from(elements[i].querySelectorAll(selector))\r\n        );\r\n      }\r\n      /**\r\n       * 用之前的空数组array连接上新的元素，然后把连接了新元素的新数组array放回空数组array\r\n       * 另外，elements[i].querySelectorAll(selector)是一个伪数组\r\n       */\r\n      array.oldApi = this; // this是旧的api\r\n      return jQuery(array);\r\n\r\n      /**\r\n       * 等价于\r\n       * const newApi = jQuery(array);\r\n       * return newApi;\r\n       */\r\n\r\n      /**\r\n       * 目的是防止\r\n       * elements = array;\r\n       * return this;\r\n       * \"污染\"elements\r\n       */\r\n    },\r\n    each(fn) {\r\n      for (let i = 0; i < elements.length; i++) {\r\n        fn.call(null, elements[i], i); // this为null，或者说fn不支持this\r\n      }\r\n      return this; // this是api对象\r\n    },\r\n    parent() {\r\n      const array = [];\r\n      this.each((node) => {\r\n        // 去除重复的父亲结点\r\n        if (array.indexOf(node.parentNode) === -1) {\r\n          array.push(node.parentNode);\r\n        }\r\n      });\r\n      return jQuery(array); // array没有什么可操作性，所以返回一个jQuery封装后的对象\r\n    },\r\n    children() {\r\n      const array = [];\r\n      this.each((node) => {\r\n        array.push(...node.children);\r\n        /**\r\n         * 直接采用\r\n         * array.push(node.children);\r\n         * 得到的是一个数组的数组，不符合要求\r\n         * ...展开操作符的意思是将node.children拆开，第一个元素当作第一个参数，第二个元素当作第二个参数\r\n         * 等价于\r\n         * array.push(node.children[0], node.children[1], node.children[2]...)\r\n         */\r\n      });\r\n      return jQuery(array);\r\n    },\r\n    print() {\r\n      console.log(elements); // elements是对应的元素们，与this所指的对象要区分开\r\n    },\r\n    // 闭包：函数访问外部变量\r\n    addClass(className) {\r\n      for (let i = 0; i < elements.length; i++) {\r\n        elements[i].classList.add(className);\r\n      }\r\n      return this;\r\n    },\r\n    oldApi: selectorOrArray.oldApi,\r\n    end() {\r\n      return this.oldApi; // this是新的api（当前的api）\r\n    },\r\n  };\r\n  /**\r\n   * 等价于\r\n   * const api = {}；\r\n   * return api;\r\n   */\r\n};\r\n"],"names":[],"version":3,"file":"index.3e2f9b55.js.map","sourceRoot":"/__parcel_source_root/"}